// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telecomtower.proto

/*
Package telecomtower is a generated protocol buffer package.

It is generated from these files:
	telecomtower.proto

It has these top-level messages:
	Color
	Point
	Pixel
	DrawRequest
	DrawResponse
	Init
	Clear
	SetPixels
	DrawRectangle
	DrawBitmap
	WriteText
	SetLayerOrigin
	SetLayerAlpha
	AutoRoll
*/
package telecomtower

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PaintMode int32

const (
	PaintMode_PAINT PaintMode = 0
	PaintMode_OVER  PaintMode = 1
)

var PaintMode_name = map[int32]string{
	0: "PAINT",
	1: "OVER",
}
var PaintMode_value = map[string]int32{
	"PAINT": 0,
	"OVER":  1,
}

func (x PaintMode) String() string {
	return proto.EnumName(PaintMode_name, int32(x))
}
func (PaintMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AutoRoll_Mode int32

const (
	AutoRoll_STOP     AutoRoll_Mode = 0
	AutoRoll_START    AutoRoll_Mode = 1
	AutoRoll_NEXT     AutoRoll_Mode = 2
	AutoRoll_CONTINUE AutoRoll_Mode = 3
)

var AutoRoll_Mode_name = map[int32]string{
	0: "STOP",
	1: "START",
	2: "NEXT",
	3: "CONTINUE",
}
var AutoRoll_Mode_value = map[string]int32{
	"STOP":     0,
	"START":    1,
	"NEXT":     2,
	"CONTINUE": 3,
}

func (x AutoRoll_Mode) String() string {
	return proto.EnumName(AutoRoll_Mode_name, int32(x))
}
func (AutoRoll_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

// Color describes a color as a 16bit RGBA tuple.
type Color struct {
	Red   uint32 `protobuf:"varint,1,opt,name=red" json:"red,omitempty"`
	Green uint32 `protobuf:"varint,2,opt,name=green" json:"green,omitempty"`
	Blue  uint32 `protobuf:"varint,3,opt,name=blue" json:"blue,omitempty"`
	Alpha uint32 `protobuf:"varint,4,opt,name=alpha" json:"alpha,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Color) GetRed() uint32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *Color) GetGreen() uint32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *Color) GetBlue() uint32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

func (m *Color) GetAlpha() uint32 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

// Point describes a location (x,y) on the bitmap
type Point struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Point) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// Pixel is the basic element of a picture. It represents the color at a
// given point.
type Pixel struct {
	Point *Point `protobuf:"bytes,1,opt,name=point" json:"point,omitempty"`
	Color *Color `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
}

func (m *Pixel) Reset()                    { *m = Pixel{} }
func (m *Pixel) String() string            { return proto.CompactTextString(m) }
func (*Pixel) ProtoMessage()               {}
func (*Pixel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pixel) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Pixel) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

// DrawRequest is a basic drawing request. It can just set the color of a
// point, or do more complex operation such as writing text with a given
// font in a given color at a given position.
type DrawRequest struct {
	// Types that are valid to be assigned to Type:
	//	*DrawRequest_Init
	//	*DrawRequest_Clear
	//	*DrawRequest_SetPixels
	//	*DrawRequest_DrawRectangle
	//	*DrawRequest_DrawBitmap
	//	*DrawRequest_WriteText
	//	*DrawRequest_SetLayerOrigin
	//	*DrawRequest_SetLayerAlpha
	//	*DrawRequest_AutoRoll
	Type isDrawRequest_Type `protobuf_oneof:"type"`
}

func (m *DrawRequest) Reset()                    { *m = DrawRequest{} }
func (m *DrawRequest) String() string            { return proto.CompactTextString(m) }
func (*DrawRequest) ProtoMessage()               {}
func (*DrawRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isDrawRequest_Type interface {
	isDrawRequest_Type()
}

type DrawRequest_Init struct {
	Init *Init `protobuf:"bytes,1,opt,name=init,oneof"`
}
type DrawRequest_Clear struct {
	Clear *Clear `protobuf:"bytes,2,opt,name=clear,oneof"`
}
type DrawRequest_SetPixels struct {
	SetPixels *SetPixels `protobuf:"bytes,3,opt,name=setPixels,oneof"`
}
type DrawRequest_DrawRectangle struct {
	DrawRectangle *DrawRectangle `protobuf:"bytes,4,opt,name=drawRectangle,oneof"`
}
type DrawRequest_DrawBitmap struct {
	DrawBitmap *DrawBitmap `protobuf:"bytes,5,opt,name=drawBitmap,oneof"`
}
type DrawRequest_WriteText struct {
	WriteText *WriteText `protobuf:"bytes,6,opt,name=writeText,oneof"`
}
type DrawRequest_SetLayerOrigin struct {
	SetLayerOrigin *SetLayerOrigin `protobuf:"bytes,7,opt,name=setLayerOrigin,oneof"`
}
type DrawRequest_SetLayerAlpha struct {
	SetLayerAlpha *SetLayerAlpha `protobuf:"bytes,8,opt,name=setLayerAlpha,oneof"`
}
type DrawRequest_AutoRoll struct {
	AutoRoll *AutoRoll `protobuf:"bytes,9,opt,name=autoRoll,oneof"`
}

func (*DrawRequest_Init) isDrawRequest_Type()           {}
func (*DrawRequest_Clear) isDrawRequest_Type()          {}
func (*DrawRequest_SetPixels) isDrawRequest_Type()      {}
func (*DrawRequest_DrawRectangle) isDrawRequest_Type()  {}
func (*DrawRequest_DrawBitmap) isDrawRequest_Type()     {}
func (*DrawRequest_WriteText) isDrawRequest_Type()      {}
func (*DrawRequest_SetLayerOrigin) isDrawRequest_Type() {}
func (*DrawRequest_SetLayerAlpha) isDrawRequest_Type()  {}
func (*DrawRequest_AutoRoll) isDrawRequest_Type()       {}

func (m *DrawRequest) GetType() isDrawRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DrawRequest) GetInit() *Init {
	if x, ok := m.GetType().(*DrawRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (m *DrawRequest) GetClear() *Clear {
	if x, ok := m.GetType().(*DrawRequest_Clear); ok {
		return x.Clear
	}
	return nil
}

func (m *DrawRequest) GetSetPixels() *SetPixels {
	if x, ok := m.GetType().(*DrawRequest_SetPixels); ok {
		return x.SetPixels
	}
	return nil
}

func (m *DrawRequest) GetDrawRectangle() *DrawRectangle {
	if x, ok := m.GetType().(*DrawRequest_DrawRectangle); ok {
		return x.DrawRectangle
	}
	return nil
}

func (m *DrawRequest) GetDrawBitmap() *DrawBitmap {
	if x, ok := m.GetType().(*DrawRequest_DrawBitmap); ok {
		return x.DrawBitmap
	}
	return nil
}

func (m *DrawRequest) GetWriteText() *WriteText {
	if x, ok := m.GetType().(*DrawRequest_WriteText); ok {
		return x.WriteText
	}
	return nil
}

func (m *DrawRequest) GetSetLayerOrigin() *SetLayerOrigin {
	if x, ok := m.GetType().(*DrawRequest_SetLayerOrigin); ok {
		return x.SetLayerOrigin
	}
	return nil
}

func (m *DrawRequest) GetSetLayerAlpha() *SetLayerAlpha {
	if x, ok := m.GetType().(*DrawRequest_SetLayerAlpha); ok {
		return x.SetLayerAlpha
	}
	return nil
}

func (m *DrawRequest) GetAutoRoll() *AutoRoll {
	if x, ok := m.GetType().(*DrawRequest_AutoRoll); ok {
		return x.AutoRoll
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DrawRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DrawRequest_OneofMarshaler, _DrawRequest_OneofUnmarshaler, _DrawRequest_OneofSizer, []interface{}{
		(*DrawRequest_Init)(nil),
		(*DrawRequest_Clear)(nil),
		(*DrawRequest_SetPixels)(nil),
		(*DrawRequest_DrawRectangle)(nil),
		(*DrawRequest_DrawBitmap)(nil),
		(*DrawRequest_WriteText)(nil),
		(*DrawRequest_SetLayerOrigin)(nil),
		(*DrawRequest_SetLayerAlpha)(nil),
		(*DrawRequest_AutoRoll)(nil),
	}
}

func _DrawRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DrawRequest)
	// type
	switch x := m.Type.(type) {
	case *DrawRequest_Init:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Init); err != nil {
			return err
		}
	case *DrawRequest_Clear:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Clear); err != nil {
			return err
		}
	case *DrawRequest_SetPixels:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetPixels); err != nil {
			return err
		}
	case *DrawRequest_DrawRectangle:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrawRectangle); err != nil {
			return err
		}
	case *DrawRequest_DrawBitmap:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrawBitmap); err != nil {
			return err
		}
	case *DrawRequest_WriteText:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WriteText); err != nil {
			return err
		}
	case *DrawRequest_SetLayerOrigin:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetLayerOrigin); err != nil {
			return err
		}
	case *DrawRequest_SetLayerAlpha:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetLayerAlpha); err != nil {
			return err
		}
	case *DrawRequest_AutoRoll:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoRoll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DrawRequest.Type has unexpected type %T", x)
	}
	return nil
}

func _DrawRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DrawRequest)
	switch tag {
	case 1: // type.init
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Init)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_Init{msg}
		return true, err
	case 2: // type.clear
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clear)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_Clear{msg}
		return true, err
	case 3: // type.setPixels
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetPixels)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_SetPixels{msg}
		return true, err
	case 4: // type.drawRectangle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DrawRectangle)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_DrawRectangle{msg}
		return true, err
	case 5: // type.drawBitmap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DrawBitmap)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_DrawBitmap{msg}
		return true, err
	case 6: // type.writeText
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WriteText)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_WriteText{msg}
		return true, err
	case 7: // type.setLayerOrigin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetLayerOrigin)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_SetLayerOrigin{msg}
		return true, err
	case 8: // type.setLayerAlpha
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetLayerAlpha)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_SetLayerAlpha{msg}
		return true, err
	case 9: // type.autoRoll
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AutoRoll)
		err := b.DecodeMessage(msg)
		m.Type = &DrawRequest_AutoRoll{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DrawRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DrawRequest)
	// type
	switch x := m.Type.(type) {
	case *DrawRequest_Init:
		s := proto.Size(x.Init)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_Clear:
		s := proto.Size(x.Clear)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_SetPixels:
		s := proto.Size(x.SetPixels)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_DrawRectangle:
		s := proto.Size(x.DrawRectangle)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_DrawBitmap:
		s := proto.Size(x.DrawBitmap)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_WriteText:
		s := proto.Size(x.WriteText)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_SetLayerOrigin:
		s := proto.Size(x.SetLayerOrigin)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_SetLayerAlpha:
		s := proto.Size(x.SetLayerAlpha)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DrawRequest_AutoRoll:
		s := proto.Size(x.AutoRoll)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Draw response is the return value of a rendering. It is empty if everything
// was OK, otherwise it is the description of the error.
type DrawResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *DrawResponse) Reset()                    { *m = DrawResponse{} }
func (m *DrawResponse) String() string            { return proto.CompactTextString(m) }
func (*DrawResponse) ProtoMessage()               {}
func (*DrawResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DrawResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// init resets all layers
type Init struct {
}

func (m *Init) Reset()                    { *m = Init{} }
func (m *Init) String() string            { return proto.CompactTextString(m) }
func (*Init) ProtoMessage()               {}
func (*Init) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Clear clears a set of layers.
type Clear struct {
	Layer []int32 `protobuf:"varint,1,rep,packed,name=layer" json:"layer,omitempty"`
}

func (m *Clear) Reset()                    { *m = Clear{} }
func (m *Clear) String() string            { return proto.CompactTextString(m) }
func (*Clear) ProtoMessage()               {}
func (*Clear) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Clear) GetLayer() []int32 {
	if m != nil {
		return m.Layer
	}
	return nil
}

// SetPixels sets individual pixels of the bitmap.
type SetPixels struct {
	Pixels    []*Pixel  `protobuf:"bytes,1,rep,name=pixels" json:"pixels,omitempty"`
	Layer     int32     `protobuf:"varint,2,opt,name=layer" json:"layer,omitempty"`
	PaintMode PaintMode `protobuf:"varint,3,opt,name=paintMode,enum=telecomtower.v1.PaintMode" json:"paintMode,omitempty"`
}

func (m *SetPixels) Reset()                    { *m = SetPixels{} }
func (m *SetPixels) String() string            { return proto.CompactTextString(m) }
func (*SetPixels) ProtoMessage()               {}
func (*SetPixels) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetPixels) GetPixels() []*Pixel {
	if m != nil {
		return m.Pixels
	}
	return nil
}

func (m *SetPixels) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *SetPixels) GetPaintMode() PaintMode {
	if m != nil {
		return m.PaintMode
	}
	return PaintMode_PAINT
}

// DrawLine draws a rectangle defined by point0 and point1 in a given color.
// The rectangle can be "degraded" to a line.
type DrawRectangle struct {
	Min       *Point    `protobuf:"bytes,1,opt,name=min" json:"min,omitempty"`
	Max       *Point    `protobuf:"bytes,2,opt,name=max" json:"max,omitempty"`
	Color     *Color    `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
	Layer     int32     `protobuf:"varint,4,opt,name=layer" json:"layer,omitempty"`
	PaintMode PaintMode `protobuf:"varint,5,opt,name=paintMode,enum=telecomtower.v1.PaintMode" json:"paintMode,omitempty"`
}

func (m *DrawRectangle) Reset()                    { *m = DrawRectangle{} }
func (m *DrawRectangle) String() string            { return proto.CompactTextString(m) }
func (*DrawRectangle) ProtoMessage()               {}
func (*DrawRectangle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DrawRectangle) GetMin() *Point {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *DrawRectangle) GetMax() *Point {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *DrawRectangle) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *DrawRectangle) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *DrawRectangle) GetPaintMode() PaintMode {
	if m != nil {
		return m.PaintMode
	}
	return PaintMode_PAINT
}

// DrawBitbap fills a rectangular region with the given pixel colors. The
// list of colors is given in Row-major order
// (https://en.wikipedia.org/wiki/Row-_and_column-major_order)
type DrawBitmap struct {
	Position  *Point    `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Width     uint32    `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height    uint32    `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Colors    []*Color  `protobuf:"bytes,4,rep,name=colors" json:"colors,omitempty"`
	Layer     int32     `protobuf:"varint,5,opt,name=layer" json:"layer,omitempty"`
	PaintMode PaintMode `protobuf:"varint,6,opt,name=paintMode,enum=telecomtower.v1.PaintMode" json:"paintMode,omitempty"`
}

func (m *DrawBitmap) Reset()                    { *m = DrawBitmap{} }
func (m *DrawBitmap) String() string            { return proto.CompactTextString(m) }
func (*DrawBitmap) ProtoMessage()               {}
func (*DrawBitmap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DrawBitmap) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *DrawBitmap) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *DrawBitmap) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *DrawBitmap) GetColors() []*Color {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *DrawBitmap) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *DrawBitmap) GetPaintMode() PaintMode {
	if m != nil {
		return m.PaintMode
	}
	return PaintMode_PAINT
}

// WriteText writes a string at a given position, with a given font and
// a given color. If the text is clipped inside the boundaries of the
// bitmap.
type WriteText struct {
	X         int32     `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Font      string    `protobuf:"bytes,2,opt,name=font" json:"font,omitempty"`
	Color     *Color    `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
	Text      string    `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Layer     int32     `protobuf:"varint,5,opt,name=layer" json:"layer,omitempty"`
	PaintMode PaintMode `protobuf:"varint,6,opt,name=paintMode,enum=telecomtower.v1.PaintMode" json:"paintMode,omitempty"`
}

func (m *WriteText) Reset()                    { *m = WriteText{} }
func (m *WriteText) String() string            { return proto.CompactTextString(m) }
func (*WriteText) ProtoMessage()               {}
func (*WriteText) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WriteText) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *WriteText) GetFont() string {
	if m != nil {
		return m.Font
	}
	return ""
}

func (m *WriteText) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *WriteText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *WriteText) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *WriteText) GetPaintMode() PaintMode {
	if m != nil {
		return m.PaintMode
	}
	return PaintMode_PAINT
}

// SetLayerOrigin defines the origin of the frame
type SetLayerOrigin struct {
	Layer    int32  `protobuf:"varint,1,opt,name=layer" json:"layer,omitempty"`
	Position *Point `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

func (m *SetLayerOrigin) Reset()                    { *m = SetLayerOrigin{} }
func (m *SetLayerOrigin) String() string            { return proto.CompactTextString(m) }
func (*SetLayerOrigin) ProtoMessage()               {}
func (*SetLayerOrigin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetLayerOrigin) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *SetLayerOrigin) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

// SetLayerAlpha defines the global transparency of the layer.
type SetLayerAlpha struct {
	Layer int32 `protobuf:"varint,1,opt,name=layer" json:"layer,omitempty"`
	Alpha int32 `protobuf:"varint,2,opt,name=alpha" json:"alpha,omitempty"`
}

func (m *SetLayerAlpha) Reset()                    { *m = SetLayerAlpha{} }
func (m *SetLayerAlpha) String() string            { return proto.CompactTextString(m) }
func (*SetLayerAlpha) ProtoMessage()               {}
func (*SetLayerAlpha) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SetLayerAlpha) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *SetLayerAlpha) GetAlpha() int32 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

// Roll starts an horizontal automatic rotation
type AutoRoll struct {
	Layer     int32         `protobuf:"varint,1,opt,name=layer" json:"layer,omitempty"`
	Mode      AutoRoll_Mode `protobuf:"varint,2,opt,name=mode,enum=telecomtower.v1.AutoRoll_Mode" json:"mode,omitempty"`
	Entry     int32         `protobuf:"varint,3,opt,name=entry" json:"entry,omitempty"`
	Separator int32         `protobuf:"varint,4,opt,name=separator" json:"separator,omitempty"`
}

func (m *AutoRoll) Reset()                    { *m = AutoRoll{} }
func (m *AutoRoll) String() string            { return proto.CompactTextString(m) }
func (*AutoRoll) ProtoMessage()               {}
func (*AutoRoll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AutoRoll) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *AutoRoll) GetMode() AutoRoll_Mode {
	if m != nil {
		return m.Mode
	}
	return AutoRoll_STOP
}

func (m *AutoRoll) GetEntry() int32 {
	if m != nil {
		return m.Entry
	}
	return 0
}

func (m *AutoRoll) GetSeparator() int32 {
	if m != nil {
		return m.Separator
	}
	return 0
}

func init() {
	proto.RegisterType((*Color)(nil), "telecomtower.v1.Color")
	proto.RegisterType((*Point)(nil), "telecomtower.v1.Point")
	proto.RegisterType((*Pixel)(nil), "telecomtower.v1.Pixel")
	proto.RegisterType((*DrawRequest)(nil), "telecomtower.v1.DrawRequest")
	proto.RegisterType((*DrawResponse)(nil), "telecomtower.v1.DrawResponse")
	proto.RegisterType((*Init)(nil), "telecomtower.v1.Init")
	proto.RegisterType((*Clear)(nil), "telecomtower.v1.Clear")
	proto.RegisterType((*SetPixels)(nil), "telecomtower.v1.SetPixels")
	proto.RegisterType((*DrawRectangle)(nil), "telecomtower.v1.DrawRectangle")
	proto.RegisterType((*DrawBitmap)(nil), "telecomtower.v1.DrawBitmap")
	proto.RegisterType((*WriteText)(nil), "telecomtower.v1.WriteText")
	proto.RegisterType((*SetLayerOrigin)(nil), "telecomtower.v1.SetLayerOrigin")
	proto.RegisterType((*SetLayerAlpha)(nil), "telecomtower.v1.SetLayerAlpha")
	proto.RegisterType((*AutoRoll)(nil), "telecomtower.v1.AutoRoll")
	proto.RegisterEnum("telecomtower.v1.PaintMode", PaintMode_name, PaintMode_value)
	proto.RegisterEnum("telecomtower.v1.AutoRoll_Mode", AutoRoll_Mode_name, AutoRoll_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TowerDisplay service

type TowerDisplayClient interface {
	// Draw receives a stream of DrawRequests. When the stream closes, the
	// display is rendered (refreshed) and the caller receives the result in
	// the DrawResponse.
	Draw(ctx context.Context, opts ...grpc.CallOption) (TowerDisplay_DrawClient, error)
}

type towerDisplayClient struct {
	cc *grpc.ClientConn
}

func NewTowerDisplayClient(cc *grpc.ClientConn) TowerDisplayClient {
	return &towerDisplayClient{cc}
}

func (c *towerDisplayClient) Draw(ctx context.Context, opts ...grpc.CallOption) (TowerDisplay_DrawClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TowerDisplay_serviceDesc.Streams[0], c.cc, "/telecomtower.v1.TowerDisplay/Draw", opts...)
	if err != nil {
		return nil, err
	}
	x := &towerDisplayDrawClient{stream}
	return x, nil
}

type TowerDisplay_DrawClient interface {
	Send(*DrawRequest) error
	CloseAndRecv() (*DrawResponse, error)
	grpc.ClientStream
}

type towerDisplayDrawClient struct {
	grpc.ClientStream
}

func (x *towerDisplayDrawClient) Send(m *DrawRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *towerDisplayDrawClient) CloseAndRecv() (*DrawResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DrawResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TowerDisplay service

type TowerDisplayServer interface {
	// Draw receives a stream of DrawRequests. When the stream closes, the
	// display is rendered (refreshed) and the caller receives the result in
	// the DrawResponse.
	Draw(TowerDisplay_DrawServer) error
}

func RegisterTowerDisplayServer(s *grpc.Server, srv TowerDisplayServer) {
	s.RegisterService(&_TowerDisplay_serviceDesc, srv)
}

func _TowerDisplay_Draw_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TowerDisplayServer).Draw(&towerDisplayDrawServer{stream})
}

type TowerDisplay_DrawServer interface {
	SendAndClose(*DrawResponse) error
	Recv() (*DrawRequest, error)
	grpc.ServerStream
}

type towerDisplayDrawServer struct {
	grpc.ServerStream
}

func (x *towerDisplayDrawServer) SendAndClose(m *DrawResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *towerDisplayDrawServer) Recv() (*DrawRequest, error) {
	m := new(DrawRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TowerDisplay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telecomtower.v1.TowerDisplay",
	HandlerType: (*TowerDisplayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Draw",
			Handler:       _TowerDisplay_Draw_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "telecomtower.proto",
}

func init() { proto.RegisterFile("telecomtower.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0xc7, 0x6d, 0xb0, 0x59, 0x7c, 0xf8, 0x28, 0x1a, 0xb5, 0x2b, 0x77, 0xbb, 0x9b, 0x46, 0xee,
	0x0d, 0x6a, 0x2b, 0xa4, 0x92, 0x8b, 0x56, 0xad, 0x7a, 0x41, 0x12, 0x2a, 0x90, 0x5a, 0x40, 0x83,
	0xd3, 0x8f, 0xdc, 0x39, 0x30, 0x85, 0x91, 0x8c, 0xed, 0xda, 0x93, 0x02, 0xcf, 0xd0, 0x67, 0x8a,
	0xfa, 0x2c, 0x7d, 0x81, 0x3e, 0x43, 0x35, 0x67, 0x30, 0x36, 0x01, 0x37, 0x89, 0xb4, 0x77, 0x73,
	0x86, 0xdf, 0x1c, 0xcf, 0xff, 0x7c, 0x0d, 0x40, 0x04, 0xf3, 0xd9, 0x2c, 0x5c, 0x89, 0x70, 0xcd,
	0xe2, 0x4e, 0x14, 0x87, 0x22, 0x24, 0x1f, 0x1c, 0xec, 0xfd, 0xf9, 0x95, 0xf3, 0x1b, 0x98, 0x57,
	0xa1, 0x1f, 0xc6, 0xa4, 0x05, 0xe5, 0x98, 0xcd, 0x6d, 0xfd, 0x5c, 0x6f, 0x37, 0xa8, 0x5c, 0x92,
	0x0f, 0xc1, 0x5c, 0xc4, 0x8c, 0x05, 0x76, 0x09, 0xf7, 0x94, 0x41, 0x08, 0x18, 0x77, 0xfe, 0x3d,
	0xb3, 0xcb, 0xb8, 0x89, 0x6b, 0x49, 0x7a, 0x7e, 0xb4, 0xf4, 0x6c, 0x43, 0x91, 0x68, 0x38, 0x9f,
	0x81, 0x39, 0x09, 0x79, 0x20, 0x48, 0x1d, 0xf4, 0x0d, 0x3a, 0x36, 0xa9, 0xbe, 0x91, 0xd6, 0x16,
	0x5d, 0x9a, 0x54, 0xdf, 0x3a, 0x33, 0x30, 0x27, 0x7c, 0xc3, 0x7c, 0xf2, 0x25, 0x98, 0x91, 0xa4,
	0x11, 0xac, 0x75, 0x5f, 0x77, 0x1e, 0xdd, 0xb4, 0x83, 0xbe, 0xa8, 0x82, 0x24, 0x3d, 0x93, 0xd7,
	0x46, 0x47, 0xa7, 0x68, 0x14, 0x45, 0x15, 0xe4, 0x3c, 0x18, 0x50, 0xbb, 0x8e, 0xbd, 0x35, 0x65,
	0x7f, 0xdc, 0xb3, 0x44, 0x90, 0x2f, 0xc0, 0xe0, 0x01, 0x4f, 0x3f, 0xf5, 0xd1, 0xd1, 0xe1, 0x61,
	0xc0, 0xc5, 0x40, 0xa3, 0x08, 0x91, 0x0e, 0x98, 0x33, 0x9f, 0x79, 0xff, 0xf3, 0x29, 0xf9, 0xeb,
	0x40, 0xa3, 0x0a, 0x23, 0xdf, 0x82, 0x95, 0x30, 0x81, 0xa2, 0x12, 0x8c, 0x52, 0xad, 0xfb, 0xe6,
	0xe8, 0xcc, 0x34, 0x25, 0x06, 0x1a, 0xcd, 0x70, 0xf2, 0x03, 0x34, 0xe6, 0x78, 0xcf, 0x99, 0xf0,
	0x82, 0x85, 0xcf, 0x30, 0xa0, 0xb5, 0xee, 0xd9, 0xd1, 0xf9, 0xeb, 0x3c, 0x35, 0xd0, 0xe8, 0xe1,
	0x31, 0xf2, 0x3d, 0x80, 0xdc, 0xb8, 0xe4, 0x62, 0xe5, 0x45, 0xb6, 0x89, 0x4e, 0x3e, 0x39, 0xe9,
	0x44, 0x21, 0x03, 0x8d, 0xe6, 0x0e, 0x48, 0x09, 0xeb, 0x98, 0x0b, 0xe6, 0xb2, 0x8d, 0xb0, 0x2b,
	0x05, 0x12, 0x7e, 0x49, 0x09, 0x29, 0x61, 0x8f, 0x93, 0x21, 0x34, 0x13, 0x26, 0x7e, 0xf4, 0xb6,
	0x2c, 0x1e, 0xc7, 0x7c, 0xc1, 0x03, 0xfb, 0x15, 0x3a, 0xf8, 0xf4, 0x54, 0x0c, 0x72, 0xd8, 0x40,
	0xa3, 0x8f, 0x0e, 0xca, 0x68, 0xa4, 0x3b, 0x3d, 0x2c, 0xaf, 0x6a, 0x41, 0x34, 0xa6, 0x79, 0x4a,
	0x46, 0xe3, 0xe0, 0x18, 0xf9, 0x1a, 0xaa, 0xde, 0xbd, 0x08, 0x69, 0xe8, 0xfb, 0xb6, 0x85, 0x2e,
	0x3e, 0x3e, 0x72, 0xd1, 0xdb, 0x01, 0x03, 0x8d, 0xee, 0xe1, 0xcb, 0x0a, 0x18, 0x62, 0x1b, 0x31,
	0xa7, 0x0d, 0x75, 0x15, 0xf0, 0x24, 0x0a, 0x83, 0x84, 0x11, 0x1b, 0x5e, 0xad, 0x58, 0x92, 0x78,
	0x0b, 0x86, 0x25, 0x64, 0xd1, 0xd4, 0x74, 0x2a, 0x60, 0xc8, 0xe2, 0x71, 0xde, 0x81, 0x89, 0x65,
	0x21, 0x5b, 0xc3, 0x97, 0x37, 0xb1, 0xf5, 0xf3, 0x72, 0xdb, 0xa4, 0xca, 0x70, 0xfe, 0xd2, 0xc1,
	0xda, 0x97, 0x00, 0xe9, 0x40, 0x25, 0x52, 0xe5, 0x22, 0xa1, 0x93, 0xb5, 0x2f, 0x7f, 0xa6, 0x3b,
	0x2a, 0xf3, 0xa9, 0xba, 0x48, 0x19, 0xe4, 0x1b, 0xb0, 0x22, 0x8f, 0x07, 0xe2, 0xa7, 0x70, 0xae,
	0xba, 0xb3, 0x79, 0x22, 0x69, 0x93, 0x94, 0xa0, 0x19, 0xec, 0xfc, 0xa3, 0x43, 0xe3, 0xa0, 0xa0,
	0x48, 0x1b, 0xca, 0x2b, 0x1e, 0x3c, 0xd1, 0x8a, 0x12, 0x41, 0xd2, 0xdb, 0x14, 0xf6, 0x46, 0x4a,
	0x7a, 0x9b, 0xac, 0x65, 0xcb, 0xcf, 0x68, 0xd9, 0x4c, 0xa3, 0x51, 0xa8, 0xd1, 0x7c, 0x89, 0xc6,
	0x7f, 0x75, 0x80, 0xac, 0xde, 0x49, 0x17, 0xaa, 0x51, 0x98, 0x70, 0xc1, 0xc3, 0xa7, 0x54, 0xee,
	0x39, 0x79, 0xa5, 0x35, 0x9f, 0x8b, 0x65, 0x3a, 0x0f, 0xd1, 0x20, 0xaf, 0xa1, 0xb2, 0x64, 0x7c,
	0xb1, 0x14, 0xbb, 0x89, 0xb8, 0xb3, 0x64, 0x52, 0x51, 0x49, 0x62, 0x1b, 0x05, 0x49, 0x55, 0x7a,
	0x77, 0x54, 0x26, 0xd8, 0x2c, 0x14, 0x5c, 0x79, 0x89, 0xe0, 0xbf, 0x75, 0xb0, 0xf6, 0x2d, 0xfa,
	0x68, 0x04, 0x13, 0x30, 0x7e, 0x0f, 0x03, 0x81, 0x42, 0x2c, 0x8a, 0xeb, 0x17, 0xa6, 0x87, 0x80,
	0x21, 0xe4, 0x70, 0x30, 0x94, 0x07, 0xb9, 0x7e, 0xef, 0x0a, 0x6e, 0xa1, 0x79, 0x38, 0x22, 0xf2,
	0xcd, 0x94, 0xfb, 0x42, 0x3e, 0x97, 0xa5, 0xe7, 0xe5, 0xd2, 0xf9, 0x0e, 0x1a, 0x07, 0x43, 0xa3,
	0xc0, 0xf5, 0xfe, 0x61, 0xdb, 0x75, 0x9a, 0x7a, 0xd8, 0x1e, 0x74, 0xa8, 0xa6, 0xf3, 0xa2, 0xf0,
	0x4e, 0xc6, 0x4a, 0x0a, 0x2e, 0xa1, 0xe0, 0xb3, 0xc2, 0x71, 0xd3, 0x41, 0xd1, 0xc8, 0x4a, 0x4f,
	0x2c, 0x10, 0xf1, 0x16, 0x33, 0x60, 0x52, 0x65, 0x90, 0xb7, 0xf2, 0x39, 0x89, 0xbc, 0xd8, 0x13,
	0x61, 0xda, 0x0c, 0xd9, 0x86, 0x73, 0x01, 0x86, 0xf4, 0x40, 0xaa, 0x60, 0x4c, 0xdd, 0xf1, 0xa4,
	0xa5, 0x11, 0x0b, 0xcc, 0xa9, 0xdb, 0xa3, 0x6e, 0x4b, 0x97, 0x9b, 0xa3, 0xfe, 0xaf, 0x6e, 0xab,
	0x44, 0xea, 0x50, 0xbd, 0x1a, 0x8f, 0xdc, 0xe1, 0xe8, 0xa6, 0xdf, 0x2a, 0x7f, 0x7e, 0x0e, 0xd6,
	0x3e, 0xe0, 0x92, 0x9f, 0xf4, 0x86, 0x23, 0xb7, 0xa5, 0x49, 0x7e, 0xfc, 0x73, 0x9f, 0xb6, 0xf4,
	0xee, 0x0d, 0xd4, 0x5d, 0x79, 0xd5, 0x6b, 0x9e, 0x44, 0xbe, 0xb7, 0x25, 0x7d, 0x30, 0x64, 0xf3,
	0x90, 0xb7, 0x05, 0x0f, 0x11, 0x3e, 0xab, 0x6f, 0xde, 0x15, 0xfc, 0xaa, 0xa6, 0x66, 0x5b, 0xbf,
	0x6c, 0xde, 0xd6, 0xf3, 0xc4, 0x5d, 0x05, 0xff, 0x94, 0x5c, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x8d, 0x12, 0x45, 0x86, 0xaa, 0x08, 0x00, 0x00,
}
